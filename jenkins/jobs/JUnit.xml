<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.29">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@3.9.2">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>https://github.com/junit-team/junit4.git</url>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>*/master</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions/>
  </scm>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <jdk>JDK 8.0.151</jdk>
  <triggers>
    <hudson.triggers.TimerTrigger>
      <spec>@daily</spec>
    </hudson.triggers.TimerTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash
#
# Compiles an open-source project, spoons the project, runs the tests
# and checks at each step if there aren&apos;t errors. To execute this
# script, create a job in jenkins.
#
# is also run in Travis to check this script and the compatibility with Spoon Maven Plugin
#
# Typical usage:
#
# $ cd my-maven-project-with-pom
# $ curl http://spoon.gforge.inria.fr/jenkins/build.sh | bash

# Allow to define some options to the maven command, such as debug or memory options
MAVEN_COMMAND=&quot;mvn $MVN_OPTS&quot;

echo &quot; &quot;
echo &quot;-------------------------------------------------------&quot;
echo &quot;Initizalizes project&quot;
echo &quot;-------------------------------------------------------&quot;
echo &quot; &quot;

# required if workspace has not been cleaned
git reset --hard

# Gets some information from pom.xml.
ARTIFACT_ID=$(xmlstarlet sel -N x=&quot;http://maven.apache.org/POM/4.0.0&quot; -t -v &quot;/x:project/x:artifactId&quot; pom.xml)
VERSION=$(xmlstarlet sel -N x=&quot;http://maven.apache.org/POM/4.0.0&quot; -t -v &quot;/x:project/x:version&quot; pom.xml)
MODULES_JOB=$(cat pom.xml | grep &quot;&lt;modules&gt;&quot;)
if [ -z &quot;$MODULES_JOB&quot; ]; then
	MODULES_JOB[0]=&quot;./&quot;
else
	MODULES_JOB=$(xmlstarlet sel -N x=&quot;http://maven.apache.org/POM/4.0.0&quot; -T -t -m &quot;/x:project/x:modules/x:module&quot; -v &quot;.&quot; -o &quot;/&quot; -n pom.xml)
fi

# Gets some information from git.
VERSION_ID=$(git rev-parse HEAD)

# Removes checkstyle plugin because spoon don&apos;t make beautiful code in output.
HAS_CHECKSTYLE=$(cat pom.xml | grep &quot;maven-checkstyle-plugin&quot;)
if [ ! -z HAS_CHECKSTYLE ]; then
	xmlstarlet ed -N x=&quot;http://maven.apache.org/POM/4.0.0&quot; -d &quot;/x:project/x:build/x:plugins/x:plugin[x:artifactId=&apos;maven-checkstyle-plugin&apos;]&quot; pom.xml &gt; pom.bak.xml
	mv pom.bak.xml pom.xml
fi

# Removes enforcer plugin because we would like specify our personnal repository.
HAS_ENFORCER=$(cat pom.xml | grep &quot;maven-enforcer-plugin&quot;)
if [ ! -z HAS_ENFORCER ]; then
	xmlstarlet ed -N x=&quot;http://maven.apache.org/POM/4.0.0&quot; -d &quot;/x:project/x:build/x:plugins/x:plugin[x:artifactId=&apos;maven-enforcer-plugin&apos;]&quot; pom.xml &gt; pom.bak.xml
	mv pom.bak.xml pom.xml
fi

JAVA_VERSION=`java -version  2&gt;&amp;1`

# Displays variables used in the build.
echo &quot;&quot;
echo &quot;--- Displays variables used in the build ---&quot;
echo &quot;Artifact id: $ARTIFACT_ID&quot;
echo &quot;Version: $VERSION&quot;
echo &quot;Modules job:&quot;
for module in ${MODULES_JOB// / }; do
	if [ &quot;$module&quot; = &quot;./&quot; ]; then
		echo &quot;- &quot;${JOB_NAME}
	else
		echo &quot;- &quot;${module}q
	fi
done
if [ ! -z HAS_CHECKSTYLE ]; then
	echo &quot;Has checkstyle: true&quot;
else
	echo &quot;Has checkstyle: false&quot;
fi
if [ ! -z HAS_ENFORCER ]; then
	echo &quot;Has enforcer: true&quot;
else
	echo &quot;Has enforcer: false&quot;
fi
echo &quot;Git version id: $VERSION_ID&quot;
echo &quot;Java version: $JAVA_VERSION&quot;
echo &quot;Java home: $JAVA_HOME&quot;

echo &quot; &quot;
echo &quot;-------------------------------------------------------&quot;
echo &quot;Compiles project (at the root project if it&apos;s a multi module project) without spoon&quot;
echo &quot;-------------------------------------------------------&quot;
echo &quot; &quot;

# Compiles project.
START_COMPILE_PROJECT=$(($(date +%s%N)/1000000))
$MAVEN_COMMAND clean install
if [ &quot;$?&quot; -ne 0 ]; then
    echo &quot;Error: Maven compile original project unsuccessful!&quot;
    exit 1
fi
END_COMPILE_PROJECT=$(($(date +%s%N)/1000000))
DIFF_COMPILE_PROJECT=$(echo &quot;$END_COMPILE_PROJECT - $START_COMPILE_PROJECT&quot; | bc)

# Saves the report at the root of the project.
for module in ${MODULES_JOB// / }; do
	REPORT_DIRECTORY=${module}&quot;target/surefire-reports&quot;
	module_name=$(echo ${module} | tr -d &apos;/ &apos;)

	if [ -d &quot;$REPORT_DIRECTORY&quot; ]; then
		NB_TESTS_COMPILE=0
		NB_ERRORS_COMPILE=0
		NB_SKIPPED_COMPILE=0
		NB_FAILURES_COMPILE=0
		for i in `ls $REPORT_DIRECTORY/TEST-*.xml`; do
			tests=$(xmlstarlet sel -t -v &quot;/testsuite/@tests&quot; $i)
			if [ &quot;$?&quot; -eq 0 ]; then
				NB_TESTS_COMPILE=$((NB_TESTS_COMPILE+$tests))
			fi
			errors=$(xmlstarlet sel -t -v &quot;/testsuite/@errors&quot; $i)
			if [ &quot;$?&quot; -eq 0 ]; then
				NB_ERRORS_COMPILE=$((NB_ERRORS_COMPILE+$errors))
			fi
			skip=$(xmlstarlet sel -t -v &quot;/testsuite/@skipped&quot; $i)
			if [ &quot;$?&quot; -eq 0 ]; then
				NB_SKIPPED_COMPILE=$((NB_SKIPPED_COMPILE+$skip))
			fi
			failures=$(xmlstarlet sel -t -v &quot;/testsuite/@failures&quot; $i)
			if [ &quot;$?&quot; -eq 0 ]; then
				NB_FAILURES_COMPILE=$((NB_FAILURES_COMPILE+$failures))
			fi
		done
		echo -e &quot;tests: $NB_TESTS_COMPILE\nerrors: $NB_ERRORS_COMPILE\nskipped: $NB_SKIPPED_COMPILE\nfailures: $NB_FAILURES_COMPILE&quot; &gt; result-spoon-tests-${module_name}.txt
	fi
done

# Displays results of the maven compile.
echo &quot; &quot;
echo &quot;--- Displays results of the maven compile ---&quot;
echo &quot;Time to compile: $DIFF_COMPILE_PROJECT&quot;
echo &quot;Number of tests: $NB_TESTS_COMPILE&quot;
echo &quot;Number of tests skipped: $NB_SKIPPED_COMPILE&quot;
echo &quot;Number of failures in tests: $NB_FAILURES_COMPILE&quot;
echo &quot;Number of errors in tests: $NB_ERRORS_COMPILE&quot;

echo &quot; &quot;
echo &quot;-------------------------------------------------------&quot;
echo &quot;Inserts the maven plugin to spoon the project&quot;
echo &quot;-------------------------------------------------------&quot;
echo &quot; &quot;

# Edits pom xml to prepare project to spoon project.
xmlstarlet ed -N x=&quot;http://maven.apache.org/POM/4.0.0&quot; -s &quot;/x:project&quot; --type elem -n repositories -v &quot;&quot; pom.xml &gt; pom.bak.xml
xmlstarlet ed -N x=&quot;http://maven.apache.org/POM/4.0.0&quot; -s &quot;/x:project/x:repositories&quot; --type elem -n repository -v &quot;&quot; pom.bak.xml &gt; pom.bak1.xml
xmlstarlet ed -N x=&quot;http://maven.apache.org/POM/4.0.0&quot; -s &quot;/x:project/x:repositories/x:repository[last()]&quot; --type elem -n id -v &quot;maven.inria.fr-snapshot&quot; pom.bak1.xml &gt; pom.bak2.xml
xmlstarlet ed -N x=&quot;http://maven.apache.org/POM/4.0.0&quot; -s &quot;/x:project/x:repositories/x:repository[last()]&quot; --type elem -n name -v &quot;Maven Repository for Spoon Snapshot&quot; pom.bak2.xml &gt; pom.bak3.xml
xmlstarlet ed -N x=&quot;http://maven.apache.org/POM/4.0.0&quot; -s &quot;/x:project/x:repositories/x:repository[last()]&quot; --type elem -n url -v &quot;http://maven.inria.fr/artifactory/spoon-public-snapshot/&quot; pom.bak3.xml &gt; pom.bak4.xml
xmlstarlet ed -N x=&quot;http://maven.apache.org/POM/4.0.0&quot; -s &quot;/x:project/x:repositories/x:repository[last()]&quot; --type elem -n snapshots -v &quot;&quot; pom.bak4.xml &gt; pom.bak5.xml
mv pom.bak5.xml pom.xml
rm pom.bak*.xml

xmlstarlet ed -N x=&quot;http://maven.apache.org/POM/4.0.0&quot; -s &quot;/x:project/x:build/x:plugins&quot; --type elem -n plugin -v &quot;&quot; pom.xml &gt; pom.bak.xml
xmlstarlet ed -N x=&quot;http://maven.apache.org/POM/4.0.0&quot; -s &quot;/x:project/x:build/x:plugins/x:plugin[last()]&quot; --type elem -n groupId -v &quot;fr.inria.gforge.spoon&quot; pom.bak.xml &gt; pom.bak2.xml
xmlstarlet ed -N x=&quot;http://maven.apache.org/POM/4.0.0&quot; -s &quot;/x:project/x:build/x:plugins/x:plugin[last()]&quot; --type elem -n artifactId -v &quot;spoon-maven-plugin&quot; pom.bak2.xml &gt; pom.bak3.xml

# we depend on the latest version of spoon-maven-plugin, one that does not use http://spoon.gforge.inria.fr/repositories/snapshots/ (decommissioned)
# but the correct http://maven.inria.fr/artifactory/spoon-public-snapshot/ (Inria&apos;s artifactory) 
xmlstarlet ed -N x=&quot;http://maven.apache.org/POM/4.0.0&quot; -s &quot;/x:project/x:build/x:plugins/x:plugin[last()]&quot; --type elem -n version -v &quot;3.1&quot; pom.bak3.xml &gt; pom.bak4.xml

xmlstarlet ed -N x=&quot;http://maven.apache.org/POM/4.0.0&quot; -s &quot;/x:project/x:build/x:plugins/x:plugin[last()]&quot; --type elem -n executions -v &quot;&quot; pom.bak4.xml &gt; pom.bak5.xml
xmlstarlet ed -N x=&quot;http://maven.apache.org/POM/4.0.0&quot; -s &quot;/x:project/x:build/x:plugins/x:plugin[last()]/x:executions&quot; --type elem -n execution -v &quot;&quot; pom.bak5.xml &gt; pom.bak6.xml
xmlstarlet ed -N x=&quot;http://maven.apache.org/POM/4.0.0&quot; -s &quot;/x:project/x:build/x:plugins/x:plugin[last()]/x:executions/x:execution&quot; --type elem -n phase -v &quot;generate-sources&quot; pom.bak6.xml &gt; pom.bak7.xml
xmlstarlet ed -N x=&quot;http://maven.apache.org/POM/4.0.0&quot; -s &quot;/x:project/x:build/x:plugins/x:plugin[last()]/x:executions/x:execution&quot; --type elem -n goals -v &quot;&quot; pom.bak7.xml &gt; pom.bak8.xml
xmlstarlet ed -N x=&quot;http://maven.apache.org/POM/4.0.0&quot; -s &quot;/x:project/x:build/x:plugins/x:plugin[last()]/x:executions/x:execution/x:goals&quot; --type elem -n goal -v &quot;generate&quot; pom.bak8.xml &gt; pom.bak9.xml
xmlstarlet ed -N x=&quot;http://maven.apache.org/POM/4.0.0&quot; -s &quot;/x:project/x:build/x:plugins/x:plugin[last()]&quot; --type elem -n configuration -v &quot;&quot; pom.bak9.xml &gt; pom.bak10.xml
xmlstarlet ed -N x=&quot;http://maven.apache.org/POM/4.0.0&quot; -s &quot;/x:project/x:build/x:plugins/x:plugin[last()]/x:configuration&quot; --type elem -n processors -v &quot;&quot; pom.bak10.xml &gt; pom.bak11.xml
xmlstarlet ed -N x=&quot;http://maven.apache.org/POM/4.0.0&quot; -s &quot;/x:project/x:build/x:plugins/x:plugin[last()]/x:configuration/x:processors&quot; --type elem -n processor -v &quot;spoon.processing.SpoonTagger&quot; pom.bak11.xml &gt; pom.bak11b.xml
xmlstarlet ed -N x=&quot;http://maven.apache.org/POM/4.0.0&quot; -s &quot;/x:project/x:build/x:plugins/x:plugin[last()]/x:configuration/x:enableComments&quot; --type elem -n processor -v &quot;false&quot; pom.bak11b.xml &gt; pom.bak12.xml
xmlstarlet ed -N x=&quot;http://maven.apache.org/POM/4.0.0&quot; -s &quot;/x:project/x:build/x:plugins/x:plugin[last()]&quot; --type elem -n dependencies -v &quot;&quot; pom.bak12.xml &gt; pom.bak14.xml
xmlstarlet ed -N x=&quot;http://maven.apache.org/POM/4.0.0&quot; -s &quot;/x:project/x:build/x:plugins/x:plugin[last()]/x:dependencies&quot; --type elem -n dependency -v &quot;&quot; pom.bak14.xml &gt; pom.bak19.xml
xmlstarlet ed -N x=&quot;http://maven.apache.org/POM/4.0.0&quot; -s &quot;/x:project/x:build/x:plugins/x:plugin[last()]/x:dependencies/x:dependency[last()]&quot; --type elem -n groupId -v &quot;fr.inria.gforge.spoon&quot; pom.bak19.xml &gt; pom.bak20.xml
xmlstarlet ed -N x=&quot;http://maven.apache.org/POM/4.0.0&quot; -s &quot;/x:project/x:build/x:plugins/x:plugin[last()]/x:dependencies/x:dependency[last()]&quot; --type elem -n artifactId -v &quot;spoon-core&quot; pom.bak20.xml &gt; pom.bak21.xml
xmlstarlet ed -N x=&quot;http://maven.apache.org/POM/4.0.0&quot; -s &quot;/x:project/x:build/x:plugins/x:plugin[last()]/x:dependencies/x:dependency[last()]&quot; --type elem -n version -v &quot;[7.0.0-SNAPSHOT,)&quot; pom.bak21.xml &gt; pom.bak22.xml
mv pom.bak22.xml pom.xml
rm pom.bak*.xml

# Purge the project from snapshots
# Avoid to use an old snapshot of Spoon and force the resolution
$MAVEN_COMMAND dependency:purge-local-repository -DmanualInclude=&quot;fr.inria.gforge.spoon:spoon-core&quot; -DsnapshotsOnly=true

# Compiles project with spoon configuration.
START_COMPILE_WITH_SPOON=$(($(date +%s%N)/1000000))
$MAVEN_COMMAND clean install
if [ &quot;$?&quot; -ne 0 ]; then
    echo &quot;Error: Maven compile with spoon unsuccessful!&quot;
    exit 1
fi
END_COMPILE_WITH_SPOON=$(($(date +%s%N)/1000000))
DIFF_WITH_SPOON=$(echo &quot;$END_COMPILE_WITH_SPOON - $START_COMPILE_WITH_SPOON&quot; | bc)

# Saves the report at the root of the project.
for module in ${MODULES_JOB// / }; do
	REPORT_DIRECTORY=${module}&quot;target/surefire-reports&quot;
	module_name=$(echo ${module} | tr -d &apos;/ &apos;)

        if [ ! -f ${module}&quot;target/generated-sources/spoon/spoon/Spoon.java&quot; ]; then 
            echo &quot;ERROR: no tag class, spoon has failed&quot;
            exit -1
        fi

	if [ -d &quot;$REPORT_DIRECTORY&quot; ]; then
		NB_TESTS_SPOON=0
		NB_ERRORS_SPOON=0
		NB_SKIPPED_SPOON=0
		NB_FAILURES_SPOON=0
		for i in `ls $REPORT_DIRECTORY/TEST-*.xml`; do
			tests=$(xmlstarlet sel -t -v &quot;/testsuite/@tests&quot; $i)
			if [ &quot;$?&quot; -eq 0 ]; then
				NB_TESTS_SPOON=$((NB_TESTS_SPOON+$tests))
			fi
			errors=$(xmlstarlet sel -t -v &quot;/testsuite/@errors&quot; $i)
			if [ &quot;$?&quot; -eq 0 ]; then
				NB_ERRORS_SPOON=$((NB_ERRORS_SPOON+$errors))
			fi
			skip=$(xmlstarlet sel -t -v &quot;/testsuite/@skipped&quot; $i)
			if [ &quot;$?&quot; -eq 0 ]; then
				NB_SKIPPED_SPOON=$((NB_SKIPPED_SPOON+$skip))
			fi
			failures=$(xmlstarlet sel -t -v &quot;/testsuite/@failures&quot; $i)
			if [ &quot;$?&quot; -eq 0 ]; then
				NB_FAILURES_SPOON=$((NB_FAILURES_SPOON+$failures))
			fi
		done
		echo -e &quot;tests: $NB_TESTS_SPOON\nerrors: $NB_ERRORS_SPOON\nskipped: $NB_SKIPPED_SPOON\nfailures: $NB_FAILURES_SPOON&quot; &gt; result-spoon-tests-spooned-${module_name}.txt
	fi
done

# Displays results of the maven compile.
echo &quot; &quot;
echo &quot;--- Displays results of the maven compile with spoon ---&quot;
echo &quot;Time to compile with spoon: $DIFF_WITH_SPOON&quot;
echo &quot;Number of tests: $NB_TESTS_SPOON&quot;
echo &quot;Number of tests skipped: $NB_SKIPPED_SPOON&quot;
echo &quot;Number of failures in tests: $NB_FAILURES_SPOON&quot;
echo &quot;Number of errors in tests: $NB_ERRORS_SPOON&quot;

if [ ! &quot;$NB_TESTS_SPOON&quot; -eq &quot;$NB_TESTS_COMPILE&quot; ]; then
    echo &quot;Error: Tests aren&apos;t equals between original compile and spoon compile!&quot;
    exit 1
fi

if [ ! &quot;$NB_SKIPPED_SPOON&quot; -eq &quot;$NB_SKIPPED_COMPILE&quot; ]; then
    echo &quot;Error: Tests skipped aren&apos;t equals between original compile and spoon compile!&quot;
    exit 1
fi

if [ ! &quot;$NB_FAILURES_SPOON&quot; -eq &quot;$NB_FAILURES_COMPILE&quot; ]; then
    echo &quot;Error: Tests failures aren&apos;t equals between original compile and spoon compile!&quot;
    exit 1
fi

if [ ! &quot;$NB_ERRORS_SPOON&quot; -eq &quot;$NB_ERRORS_COMPILE&quot; ]; then
    echo &quot;Error: Tests errors aren&apos;t equals between original compile and spoon compile!&quot;
    exit 1
fi

echo &quot; &quot;
echo &quot;-------------------------------------------------------&quot;
echo &quot;Overwrites source generated by spoon in the source folder&quot;
echo &quot;-------------------------------------------------------&quot;
echo &quot; &quot;

# Overwrites source folder.
for module in ${MODULES_JOB// / }; do
	GENERATED_DIRECTORY=${module}&quot;target/generated-sources/spoon/&quot;
	if [ -d &quot;$GENERATED_DIRECTORY&quot; ]; then
		cp -Rf ${GENERATED_DIRECTORY}* ${module}src/main/java
	fi
done

# Compiles project with source spooned.
START_COMPILE_SPOON_SPOON=$(($(date +%s%N)/1000000))
$MAVEN_COMMAND clean install
if [ &quot;$?&quot; -ne 0 ]; then
    echo &quot;Error: Maven compile with spoon(spoon) unsuccessful!&quot;
    exit 1
fi
END_COMPILE_SPOON_SPOON=$(($(date +%s%N)/1000000))
DIFF_SPOON_SPOON=$(echo &quot;$END_COMPILE_SPOON_SPOON - $START_COMPILE_SPOON_SPOON&quot; | bc)



# Displays results of the maven compile.
echo &quot; &quot;
echo &quot;--- Displays results of the maven compile with spoon of spoon ---&quot;
echo &quot;Time to compile with spoon of spoon: $DIFF_SPOON_SPOON&quot;

echo &quot; &quot;
echo &quot;-------------------------------------------------------&quot;
echo &quot;Retreives all results files in the project (in all sub modules if the project is a multi module project)&quot;
echo &quot;-------------------------------------------------------&quot;
echo &quot; &quot;

find . -name &quot;result-spoon-tests-*&quot;

# Moves all results file in target directory.
for module in ${MODULES_JOB// / }; do
	module_name=$(echo ${module} | tr -d &apos;/ &apos;)
	OUTPUT_DIRECTORY=&quot;${module}target/spoon-reports&quot;
	if [ -f &quot;result-spoon-tests-${module_name}.txt&quot; ]; then 
		mkdir $OUTPUT_DIRECTORY
		mv result-spoon-tests-${module_name}.txt $OUTPUT_DIRECTORY/result-spoon-tests.txt
		mv result-spoon-tests-spooned-${module_name}.txt $OUTPUT_DIRECTORY/result-spoon-tests-spooned.txt
	fi
done

if [ ! -d &quot;target/spoon-reports&quot; ]; then
	mkdir -p target/spoon-reports
fi

# Creates result file.
echo -e &quot;&lt;?xml version=\&quot;1.0\&quot;?&gt;\n&lt;section name=\&quot;\&quot;/&gt;&quot; &gt; result-spoon.xml
xmlstarlet ed -s &quot;/section&quot; --type elem -n table -v &quot;&quot; result-spoon.xml &gt; result-spoon.bak.xml
xmlstarlet ed -s &quot;/section/table&quot; --type elem -n tr -v &quot;&quot; result-spoon.bak.xml &gt; result-spoon.bak2.xml
xmlstarlet ed -s &quot;/section/table/tr&quot; --type elem -n td -v &quot;Project&quot; result-spoon.bak2.xml &gt; result-spoon.bak3.xml
xmlstarlet ed -s &quot;/section/table/tr/td&quot; --type attr -n fontattribute -v &quot;bold&quot; result-spoon.bak3.xml &gt; result-spoon.bak4.xml
xmlstarlet ed -s &quot;/section/table/tr&quot; --type elem -n td -v &quot;Commit id version&quot; result-spoon.bak4.xml &gt; result-spoon.bak5.xml
xmlstarlet ed -s &quot;/section/table/tr/td[last()]&quot; --type attr -n fontattribute -v &quot;bold&quot; result-spoon.bak5.xml &gt; result-spoon.bak6.xml
xmlstarlet ed -s &quot;/section/table/tr&quot; --type elem -n td -v &quot;Project compiles&quot; result-spoon.bak6.xml &gt; result-spoon.bak7.xml
xmlstarlet ed -s &quot;/section/table/tr/td[last()]&quot; --type attr -n fontattribute -v &quot;bold&quot; result-spoon.bak7.xml &gt; result-spoon.bak8.xml
xmlstarlet ed -s &quot;/section/table/tr&quot; --type elem -n td -v &quot;Project tests run&quot; result-spoon.bak8.xml &gt; result-spoon.bak9.xml
xmlstarlet ed -s &quot;/section/table/tr/td[last()]&quot; --type attr -n fontattribute -v &quot;bold&quot; result-spoon.bak9.xml &gt; result-spoon.bak10.xml
xmlstarlet ed -s &quot;/section/table/tr&quot; --type elem -n td -v &quot;Project spooned compiles&quot; result-spoon.bak10.xml &gt; result-spoon.bak11.xml
xmlstarlet ed -s &quot;/section/table/tr/td[last()]&quot; --type attr -n fontattribute -v &quot;bold&quot; result-spoon.bak11.xml &gt; result-spoon.bak12.xml
xmlstarlet ed -s &quot;/section/table/tr&quot; --type elem -n td -v &quot;Project spooned tests run&quot; result-spoon.bak12.xml &gt; result-spoon.bak13.xml
xmlstarlet ed -s &quot;/section/table/tr/td[last()]&quot; --type attr -n fontattribute -v &quot;bold&quot; result-spoon.bak13.xml &gt; result-spoon.bak14.xml
xmlstarlet ed -s &quot;/section/table/tr&quot; --type elem -n td -v &quot;Time to spoon&quot; result-spoon.bak14.xml &gt; result-spoon.bak15.xml
xmlstarlet ed -s &quot;/section/table/tr/td[last()]&quot; --type attr -n fontattribute -v &quot;bold&quot; result-spoon.bak15.xml &gt; result-spoon.bak16.xml
xmlstarlet ed -s &quot;/section/table/tr&quot; --type elem -n td -v &quot;Number of CtStatment&quot; result-spoon.bak16.xml &gt; result-spoon.bak17.xml
xmlstarlet ed -s &quot;/section/table/tr/td[last()]&quot; --type attr -n fontattribute -v &quot;bold&quot; result-spoon.bak17.xml &gt; result-spoon.bak18.xml
xmlstarlet ed -s &quot;/section/table/tr&quot; --type elem -n td -v &quot;Time to compile project&quot; result-spoon.bak18.xml &gt; result-spoon.bak19.xml
xmlstarlet ed -s &quot;/section/table/tr/td[last()]&quot; --type attr -n fontattribute -v &quot;bold&quot; result-spoon.bak19.xml &gt; result-spoon.bak20.xml
xmlstarlet ed -s &quot;/section/table/tr&quot; --type elem -n td -v &quot;Time to compile project spooned&quot; result-spoon.bak20.xml &gt; result-spoon.bak21.xml
xmlstarlet ed -s &quot;/section/table/tr/td[last()]&quot; --type attr -n fontattribute -v &quot;bold&quot; result-spoon.bak21.xml &gt; result-spoon.bak22.xml
xmlstarlet ed -s &quot;/section/table/tr&quot; --type elem -n td -v &quot;Spoon(Spoon(x))=Spoon(x)&quot; result-spoon.bak22.xml &gt; result-spoon.bak23.xml
xmlstarlet ed -s &quot;/section/table/tr/td[last()]&quot; --type attr -n fontattribute -v &quot;bold&quot; result-spoon.bak23.xml &gt; result-spoon.bak24.xml
mv result-spoon.bak24.xml result-spoon.xml
rm result-spoon.bak*.xml

# Saves results.
cp result-spoon.xml result-spoon.bak0.xml
counter=1
for module in ${MODULES_JOB// / }; do
	result_file=&quot;$(find &quot;${module}target/spoon-maven-plugin&quot; -maxdepth 1 -type f -name &quot;result-spoon-*.xml&quot;)&quot;
	if [ -z &quot;$result_file&quot; ]; then
        continue
	fi
	module_name=$(echo ${module} | tr -d &apos;/ &apos;)
	xmlstarlet ed -s &quot;/section/table&quot; --type elem -n tr -v &quot;&quot; result-spoon.bak$((counter-1)).xml &gt; result-spoon.bak$counter.xml
	counter=$((counter+1))
	if [ &quot;$module&quot; = &quot;./&quot; ]; then
		xmlstarlet ed -s &quot;/section/table/tr[last()]&quot; --type elem -n td -v &quot;${JOB_NAME}&quot; result-spoon.bak$((counter-1)).xml &gt; result-spoon.bak$counter.xml
	else
		xmlstarlet ed -s &quot;/section/table/tr[last()]&quot; --type elem -n td -v &quot;${module_name}&quot; result-spoon.bak$((counter-1)).xml &gt; result-spoon.bak$counter.xml
	fi
	counter=$((counter+1))
	xmlstarlet ed -s &quot;/section/table/tr[last()]&quot; --type elem -n td -v &quot;$VERSION_ID&quot; result-spoon.bak$((counter-1)).xml &gt; result-spoon.bak$counter.xml
	counter=$((counter+1))
	xmlstarlet ed -s &quot;/section/table/tr[last()]&quot; --type elem -n td -v &quot;OK&quot; result-spoon.bak$((counter-1)).xml &gt; result-spoon.bak$counter.xml
	counter=$((counter+1))
	if [ -f &quot;${module}target/spoon-reports/result-spoon-tests.txt&quot; ]; then
		xmlstarlet ed -s &quot;/section/table/tr[last()]&quot; --type elem -n td -v &quot;$(cat ${module}target/spoon-reports/result-spoon-tests.txt)&quot; result-spoon.bak$((counter-1)).xml &gt; result-spoon.bak$counter.xml
	else
		xmlstarlet ed -s &quot;/section/table/tr[last()]&quot; --type elem -n td -v &quot;N/A&quot; result-spoon.bak$((counter-1)).xml &gt; result-spoon.bak$counter.xml
	fi
	counter=$((counter+1))
	xmlstarlet ed -s &quot;/section/table/tr[last()]&quot; --type elem -n td -v &quot;OK&quot; result-spoon.bak$((counter-1)).xml &gt; result-spoon.bak$counter.xml
	counter=$((counter+1))
	if [ -f &quot;${module}target/spoon-reports/result-spoon-tests-spooned.txt&quot; ]; then
		xmlstarlet ed -s &quot;/section/table/tr[last()]&quot; --type elem -n td -v &quot;$(cat ${module}target/spoon-reports/result-spoon-tests-spooned.txt)&quot; result-spoon.bak$((counter-1)).xml &gt; result-spoon.bak$counter.xml
	else
		xmlstarlet ed -s &quot;/section/table/tr[last()]&quot; --type elem -n td -v &quot;N/A&quot; result-spoon.bak$((counter-1)).xml &gt; result-spoon.bak$counter.xml
	fi
	counter=$((counter+1))
	xmlstarlet ed -s &quot;/section/table/tr[last()]&quot; --type elem -n td -v &quot;$(xmlstarlet sel -t -v &quot;/project/performance&quot; ${result_file})&quot; result-spoon.bak$((counter-1)).xml &gt; result-spoon.bak$counter.xml
	counter=$((counter+1))
	if [ -f &quot;target/spoon-maven-plugin/spoon-nb-statement.txt&quot; ]; then
		# Computes number of CtStatement.
		NB_CTSTATEMENT=0
		for line in $(cat target/spoon-maven-plugin/spoon-nb-statement.txt); do
			NB_CTSTATEMENT=$(($NB_CTSTATEMENT+$line))
		done
		xmlstarlet ed -s &quot;/section/table/tr[last()]&quot; --type elem -n td -v &quot;$NB_CTSTATEMENT&quot; result-spoon.bak$((counter-1)).xml &gt; result-spoon.bak$counter.xml
	else
		xmlstarlet ed -s &quot;/section/table/tr[last()]&quot; --type elem -n td -v &quot;N/A&quot; result-spoon.bak$((counter-1)).xml &gt; result-spoon.bak$counter.xml
	fi
	counter=$((counter+1))
	xmlstarlet ed -s &quot;/section/table/tr[last()]&quot; --type elem -n td -v &quot;$DIFF_COMPILE_PROJECT&quot; result-spoon.bak$((counter-1)).xml &gt; result-spoon.bak$counter.xml
	counter=$((counter+1))
	xmlstarlet ed -s &quot;/section/table/tr[last()]&quot; --type elem -n td -v &quot;$DIFF_WITH_SPOON&quot; result-spoon.bak$((counter-1)).xml &gt; result-spoon.bak$counter.xml
	counter=$((counter+1))
	xmlstarlet ed -s &quot;/section/table/tr[last()]&quot; --type elem -n td -v &quot;$DIFF_SPOON_SPOON&quot; result-spoon.bak$((counter-1)).xml &gt; result-spoon.bak$counter.xml
	counter=$((counter+1))
done
mv result-spoon.bak$((counter-1)).xml result-spoon.xml
rm result-spoon.bak*.xml
mv result-spoon.xml target/spoon-reports/result-spoon.xml
cat target/spoon-reports/result-spoon.xml

exit 0
</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.tasks.ArtifactArchiver>
      <artifacts>target/spoon-reports/*</artifacts>
      <allowEmptyArchive>false</allowEmptyArchive>
      <onlyIfSuccessful>false</onlyIfSuccessful>
      <fingerprint>false</fingerprint>
      <defaultExcludes>true</defaultExcludes>
      <caseSensitive>true</caseSensitive>
    </hudson.tasks.ArtifactArchiver>
    <hudson.plugins.summary__report.ACIPluginPublisher plugin="summary_report@1.15">
      <name>target/spoon-reports/result-spoon.xml</name>
      <shownOnProjectPage>true</shownOnProjectPage>
    </hudson.plugins.summary__report.ACIPluginPublisher>
  </publishers>
  <buildWrappers>
    <hudson.plugins.ws__cleanup.PreBuildCleanup plugin="ws-cleanup@0.37">
      <deleteDirs>false</deleteDirs>
      <cleanupParameter></cleanupParameter>
      <externalDelete></externalDelete>
      <disableDeferredWipeout>false</disableDeferredWipeout>
    </hudson.plugins.ws__cleanup.PreBuildCleanup>
  </buildWrappers>
</project>